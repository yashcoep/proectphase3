<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Catalog</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        /* CSS for adding space between product rows */
        .card {
            margin-bottom: 20px; /* Adjust this value as needed */
        }
    </style>
</head>
<body>
    <!-- Logout and View Cart buttons at the top right corner -->
    <div class="d-flex justify-content-end mb-3">
        <a href="/logout" class="btn btn-danger mr-2">Logout</a>
        <button onclick="viewCart()" class="btn btn-primary">View Cart</button>
    </div>

    <div class="container mt-5">
        <h2 class="mb-4">Catalog</h2>
        <div class="row">
            <% products.forEach(product => { %>
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title"><%= product.Name %></h5>
                            <p class="card-text"><%= product.Description %></p>
                            <p class="card-text">Price: <%= product.Price %></p>
                            <p class="card-text">Available: <%= product.Quantity %></p>
                            <label for="quantity">Quantity:</label>
                            <input type="number" id="quantity_<%= product.ProductID %>" name="quantity" min="1" max="<%= product.Quantity %>" value="1">
                            <button onclick="addToCart('<%= product.Name %>', <%= product.Price %>, <%= product.ProductID %>)" class="btn btn-primary">Add to Cart</button>
                        </div>
                    </div>
                </div>
            <% }) %>
        </div>
        
        <!-- Pagination buttons -->
        <div class="mt-4">
            <% if (currentPage > 1) { %>
                <a href="/catalog?page=<%= currentPage - 1 %>" class="btn btn-secondary mr-2">&laquo; Previous</a>
            <% } %>
            <% if (currentPage < totalPages) { %>
                <a href="/catalog?page=<%= currentPage + 1 %>" class="btn btn-secondary">Next &raquo;</a>
            <% } %>
        </div>
    </div>

    <!-- Modal for displaying cart -->
    <div class="modal fade" id="cartModal" tabindex="-1" role="dialog" aria-labelledby="cartModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cartModalLabel">Cart</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="cartItems">
                <!-- Cart items will be displayed here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="clearCart()">Clear Cart</button>
                <button type="button" class="btn btn-primary" onclick="downloadQuotation()">Download Quotation</button>
                <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
    </div>


    <script>
        // Function to add product to cart
       function addToCart(name, price, id) {
            const quantityInput = document.getElementById('quantity_' + id);
            const quantity = parseInt(quantityInput.value);
            const availableQuantity = parseInt(quantityInput.getAttribute('max')); // Retrieve the maximum available quantity from the input field attribute
            if (quantity <= 0) {
                    alert('Please enter a valid quantity.');
                    return; // Exit function without adding the item to the cart
            }
            // Check if the product already exists in the cart
            let cart = JSON.parse(localStorage.getItem('cart')) || [];
            let existingProductIndex = cart.findIndex(item => item.id === id);
            if (existingProductIndex !== -1) {
                // Product already exists in the cart, update its quantity
                cart[existingProductIndex].quantity += quantity;
                if (cart[existingProductIndex].quantity > availableQuantity) {
                    alert('Requested quantity exceeds available quantity.');
                    return; // Exit function without adding the item to the cart
                }
            } else {
                // Product doesn't exist in the cart, add it
                cart.push({
                    id: id,
                    name: name,
                    price: price,
                    quantity: quantity
                });
                if (quantity > availableQuantity) {
                    alert('Requested quantity exceeds available quantity.');
                    return; // Exit function without adding the item to the cart
                }
            }

            // Update the cart in local storage
            localStorage.setItem('cart', JSON.stringify(cart));
            alert('Added ' + quantity + ' ' + name + '(s) to cart.');
        }



        // Function to view cart
        function viewCart() {
            const cart = JSON.parse(localStorage.getItem('cart')) || [];
            const cartItems = document.getElementById('cartItems');
            if (cart.length === 0) {
                cartItems.innerHTML = '<p>Your cart is empty.</p>';
            } else {
                let html = '<table class="table">';
                html += '<thead><tr><th>Product</th><th>Price</th><th>Quantity</th><th>Total</th></tr></thead>';
                html += '<tbody>';
                cart.forEach(item => {
                    html += `<tr><td>${item.name}</td><td>${item.price}</td><td>${item.quantity}</td><td>${item.price * item.quantity}</td></tr>`;
                });
                html += '</tbody></table>';
                cartItems.innerHTML = html;
            }
            $('#cartModal').modal('show'); // Show the modal
        }

        function clearCart() {
        localStorage.removeItem('cart');
            $('#cartModal').modal('hide'); // Hide the modal
            alert('Cart cleared.');
        }

        // Function to download quotation for the complete cart
        function downloadQuotation() {
            // Fetch cart content from local storage
            const cart = JSON.parse(localStorage.getItem('cart'));
            if (!cart || cart.length === 0) {
                alert('Cart is empty.');
                return;
            }

            // Company name
            const companyName = "PWS Limited";

            // Construct quotation text header
            let quotationText = `${companyName} Quotation:\n\n`;
            
            // Construct cart table
            quotationText += "Cart Items:\n\n";
            quotationText += "----------------------------------------\n";
            quotationText += "| Product       | Price    | Quantity |\n";
            quotationText += "----------------------------------------\n";
            cart.forEach(item => {
                quotationText += `| ${item.name} | ${item.price} | ${item.quantity} |\n`;
            });
            quotationText += "----------------------------------------\n";

            // Calculate total cost
            let totalCost = 0;
            cart.forEach(item => {
                totalCost += item.price * item.quantity;
            });

            console.log(cart)

            // Add total cost to quotation text
            quotationText += `\nTotal Cost: ${totalCost}\n\n`;

            // Quotation data
            const quotationData = `Quotation Date: ${new Date().toLocaleDateString()}\n\n`;
            // Add quotation data to quotation text
            quotationText += quotationData;

            // Terms and conditions
            const termsAndConditions = "Terms and Conditions: Quotation is valid based on availability.";
            // Add terms and conditions to quotation text
            quotationText += `\n${termsAndConditions}`;

            // Trigger download
            const element = document.createElement('a');
            element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(quotationText));
            element.setAttribute('download', 'cart_quotation.txt');
            element.style.display = 'none';
            document.body.appendChild(element);
            element.click();
            document.body.removeChild(element);

            console.log(cart)
            const quotation = {
                companyName: companyName,
                quatationcart: cart,
                quotationDate: new Date().toLocaleDateString(),
                totalCost: calculateTotalCost(cart)
            };
            console.log('Quatation' + JSON.stringify(quotation))

            fetch('/saveQuotation', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(quotation)
            })
            .then(response => {
                if (response.ok) {
                    return response.text();
                } else {
                    throw new Error('Failed to save quotation.');
                }
            })
            .then(data => {
                alert(data); // Show success message
                localStorage.removeItem('cart'); // Clear cart after successful quotation
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error saving quotation.');
            });

        }

        function calculateTotalCost(cart) {
            let totalCost = 0;
            cart.forEach(item => {
                totalCost += item.price * item.quantity;
            });
            return totalCost;
        }

    </script>

    <!-- Bootstrap JS and jQuery -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>
